/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "RazerSDK_autodefs.h"
#include "s3eEdk.h"
#include "RazerSDK.h"
//Declarations of Init and Term functions
extern s3eResult RazerSDKInit();
extern void RazerSDKTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_TVOS ||defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static int Plugin_getAxis_wrap(int deviceId, int axis)
{
    IwTrace(RAZERSDK_VERBOSE, ("calling RazerSDK func on main thread: Plugin_getAxis"));
    return (int)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)Plugin_getAxis, 2, deviceId, axis);
}
static bool Plugin_isPressed_wrap(int deviceId, int keyCode)
{
    IwTrace(RAZERSDK_VERBOSE, ("calling RazerSDK func on main thread: Plugin_isPressed"));
    return (bool)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)Plugin_isPressed, 2, deviceId, keyCode);
}
static bool Plugin_isPressedDown_wrap(int deviceId, int keyCode)
{
    IwTrace(RAZERSDK_VERBOSE, ("calling RazerSDK func on main thread: Plugin_isPressedDown"));
    return (bool)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)Plugin_isPressedDown, 2, deviceId, keyCode);
}
static bool Plugin_isPressedUp_wrap(int deviceId, int keyCode)
{
    IwTrace(RAZERSDK_VERBOSE, ("calling RazerSDK func on main thread: Plugin_isPressedUp"));
    return (bool)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)Plugin_isPressedUp, 2, deviceId, keyCode);
}
static void Plugin_clearButtonStates_wrap()
{
    IwTrace(RAZERSDK_VERBOSE, ("calling RazerSDK func on main thread: Plugin_clearButtonStates"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)Plugin_clearButtonStates, 0);
}
static const char* Plugin_getDeviceName_wrap(int playerNum)
{
    IwTrace(RAZERSDK_VERBOSE, ("calling RazerSDK func on main thread: Plugin_getDeviceName"));
    return (const char*)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)Plugin_getDeviceName, 1, playerNum);
}
static void Plugin_initPlugin_wrap(const char* secretApiKey, s3eCallback onSuccess, s3eCallback onFailure)
{
    IwTrace(RAZERSDK_VERBOSE, ("calling RazerSDK func on main thread: Plugin_initPlugin"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)Plugin_initPlugin, 3, secretApiKey, onSuccess, onFailure);
}
static void Plugin_requestGamerInfo_wrap(s3eCallback onSuccess, s3eCallback onFailure, s3eCallback onCancel)
{
    IwTrace(RAZERSDK_VERBOSE, ("calling RazerSDK func on main thread: Plugin_requestGamerInfo"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)Plugin_requestGamerInfo, 3, onSuccess, onFailure, onCancel);
}
static void Plugin_requestProducts_wrap(const char* productsJson, s3eCallback onSuccess, s3eCallback onFailure, s3eCallback onCancel)
{
    IwTrace(RAZERSDK_VERBOSE, ("calling RazerSDK func on main thread: Plugin_requestProducts"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)Plugin_requestProducts, 4, productsJson, onSuccess, onFailure, onCancel);
}
static void Plugin_requestPurchase_wrap(const char* purchasable, const char* productType, s3eCallback onSuccess, s3eCallback onFailure, s3eCallback onCancel)
{
    IwTrace(RAZERSDK_VERBOSE, ("calling RazerSDK func on main thread: Plugin_requestPurchase"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)Plugin_requestPurchase, 5, purchasable, productType, onSuccess, onFailure, onCancel);
}
static void Plugin_requestReceipts_wrap(s3eCallback onSuccess, s3eCallback onFailure, s3eCallback onCancel)
{
    IwTrace(RAZERSDK_VERBOSE, ("calling RazerSDK func on main thread: Plugin_requestReceipts"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)Plugin_requestReceipts, 3, onSuccess, onFailure, onCancel);
}
static void Plugin_shutdown_wrap(s3eCallback onSuccess, s3eCallback onFailure, s3eCallback onCancel)
{
    IwTrace(RAZERSDK_VERBOSE, ("calling RazerSDK func on main thread: Plugin_shutdown"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)Plugin_shutdown, 3, onSuccess, onFailure, onCancel);
}
static int Plugin_JSONObject_Construct_wrap()
{
    IwTrace(RAZERSDK_VERBOSE, ("calling RazerSDK func on main thread: Plugin_JSONObject_Construct"));
    return (int)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)Plugin_JSONObject_Construct, 0);
}
static void Plugin_JSONObject_Put_wrap(int jsonObject, const char* name, const char* value)
{
    IwTrace(RAZERSDK_VERBOSE, ("calling RazerSDK func on main thread: Plugin_JSONObject_Put"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)Plugin_JSONObject_Put, 3, jsonObject, name, value);
}
static const char* Plugin_JSONObject_ToString_wrap(int jsonObject)
{
    IwTrace(RAZERSDK_VERBOSE, ("calling RazerSDK func on main thread: Plugin_JSONObject_ToString"));
    return (const char*)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)Plugin_JSONObject_ToString, 1, jsonObject);
}
static int Plugin_JSONArray_Construct_wrap()
{
    IwTrace(RAZERSDK_VERBOSE, ("calling RazerSDK func on main thread: Plugin_JSONArray_Construct"));
    return (int)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)Plugin_JSONArray_Construct, 0);
}
static void Plugin_JSONArray_Put_wrap(int jsonArray, int index, int jsonObject)
{
    IwTrace(RAZERSDK_VERBOSE, ("calling RazerSDK func on main thread: Plugin_JSONArray_Put"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)Plugin_JSONArray_Put, 3, jsonArray, index, jsonObject);
}
static const char* Plugin_JSONArray_ToString_wrap(int jsonArray)
{
    IwTrace(RAZERSDK_VERBOSE, ("calling RazerSDK func on main thread: Plugin_JSONArray_ToString"));
    return (const char*)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)Plugin_JSONArray_ToString, 1, jsonArray);
}
#define Plugin_getAxis Plugin_getAxis_wrap

#define Plugin_isPressed Plugin_isPressed_wrap

#define Plugin_isPressedDown Plugin_isPressedDown_wrap

#define Plugin_isPressedUp Plugin_isPressedUp_wrap

#define Plugin_clearButtonStates Plugin_clearButtonStates_wrap

#define Plugin_getDeviceName Plugin_getDeviceName_wrap

#define Plugin_initPlugin Plugin_initPlugin_wrap

#define Plugin_requestGamerInfo Plugin_requestGamerInfo_wrap

#define Plugin_requestProducts Plugin_requestProducts_wrap

#define Plugin_requestPurchase Plugin_requestPurchase_wrap

#define Plugin_requestReceipts Plugin_requestReceipts_wrap

#define Plugin_shutdown Plugin_shutdown_wrap

#define Plugin_JSONObject_Construct Plugin_JSONObject_Construct_wrap

#define Plugin_JSONObject_Put Plugin_JSONObject_Put_wrap

#define Plugin_JSONObject_ToString Plugin_JSONObject_ToString_wrap

#define Plugin_JSONArray_Construct Plugin_JSONArray_Construct_wrap

#define Plugin_JSONArray_Put Plugin_JSONArray_Put_wrap

#define Plugin_JSONArray_ToString Plugin_JSONArray_ToString_wrap


#endif

void RazerSDKRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[18];
    funcPtrs[0] = (void*)Plugin_getAxis;
    funcPtrs[1] = (void*)Plugin_isPressed;
    funcPtrs[2] = (void*)Plugin_isPressedDown;
    funcPtrs[3] = (void*)Plugin_isPressedUp;
    funcPtrs[4] = (void*)Plugin_clearButtonStates;
    funcPtrs[5] = (void*)Plugin_getDeviceName;
    funcPtrs[6] = (void*)Plugin_initPlugin;
    funcPtrs[7] = (void*)Plugin_requestGamerInfo;
    funcPtrs[8] = (void*)Plugin_requestProducts;
    funcPtrs[9] = (void*)Plugin_requestPurchase;
    funcPtrs[10] = (void*)Plugin_requestReceipts;
    funcPtrs[11] = (void*)Plugin_shutdown;
    funcPtrs[12] = (void*)Plugin_JSONObject_Construct;
    funcPtrs[13] = (void*)Plugin_JSONObject_Put;
    funcPtrs[14] = (void*)Plugin_JSONObject_ToString;
    funcPtrs[15] = (void*)Plugin_JSONArray_Construct;
    funcPtrs[16] = (void*)Plugin_JSONArray_Put;
    funcPtrs[17] = (void*)Plugin_JSONArray_ToString;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[18] = { 0 };

    /*
     * Register the extension
     */
s3eEdkRegister("RazerSDK", funcPtrs, sizeof(funcPtrs), flags, RazerSDKInit, RazerSDKTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int RazerSDKStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&RazerSDKRegisterExt;
    return 0;
}

int g_RazerSDKVal = RazerSDKStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    RazerSDKRegisterExt();
}
#endif

#endif
